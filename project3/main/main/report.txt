Name:King Bi
UCLA ID:806151692

LIST OF NOTABLE OBSTACLES OVERCAME 
1.fliparound funtion not working properly due to incorrect for loop parameters
2.Union with no duplicates function logic error 
3.Incorrect interpreation of project specification regarding the integer return of shftRight function 

LIST OF TEST DATA

all the arrays used for testing: 

    string a[7] = { "ee", "dd", "cc", "bb", "aa", "BB", "AA" };
    string b[7] = { "ee", "BB", "BB", "BB", "cc", "dd", "AA" };
    string people[5] = { "samwell", "jon", "margaery", "daenerys", "tyrion" };
    string folks[8] = { "samwell", "jon", "margaery", "daenerys", "tyrion", "sansa", "howard123", "jon" };
    string o[5] = { "1","2","3","3","4" };
    string four[5] = { "1","2","3","3","4" };
    string fourRe[5] = { "4","3","3","2","1" };
    string five[5] = { "1","2","3","4","5" };
    string fiveRe[5] = { "5","4","3","2","1" };
    string three[5] = { "1","2","1","3","1" };
    string threeRe[5] = { "1","3","1","2","1" };
    string two[5] = { "1","2","1","2","1" };
    string allOne[5] = { "1","1","1","1","1" };
    string nineFive[5] = { "5","6","7","8","9" };
    string nineFour[5] = { "5","4","7","8","9" };
    string eightFour[5] = { "5","4","7","4","8" };
    string example[7] = { "5", "1", "5", "2", "10", "11", "15" };
    string example1[8] = { "0", "1", "2", "3", "4", "5", "6", "7" };
    string bar[7] = { "5", "1", "5", "2", "10", "11", "15" };
    string blank[4] = { "", "", "", "" };

locateMinimum:

    assert(locateMinimum(fourRe, -5) == -1);tests to see locateMin returns -1 when size n is invalid
    assert(locateMinimum(people, 5) == 3);test to see if locateMin returns the correct index of min 
    assert(locateMinimum(people, 4) == 3);test to see if locateMin returns the correct index of min 
    assert(locateMinimum(people, 3) == 1);test to see if locateMin returns the correct index of min 
    assert(locateMinimum(people, 2) == 1);test to see if locateMin returns the correct index of min 
    assert(locateMinimum(people, 1) == 0);test to see if locateMin returns the correct index of min 
    assert(locateMinimum(example, 7) == 1);test to see if locateMin returns the correct index of min 
    assert(locateMinimum(example, 1) == 0);test to see if locateMin returns the correct index of min 
    assert(locateMinimum(a, 7) == 6);test to see if locateMin returns the correct index of min 
    assert(locateMinimum(a, 6) == 5);test to see if locateMin returns the correct index of min 
    assert(locateMinimum(a, 5) == 4);test to see if locateMin returns the correct index of min
    assert(locateMinimum(a, 4) == 3);test to see if locateMin returns the correct index of min
    assert(locateMinimum(a, 3) == 2);test to see if locateMin returns the correct index of min
    assert(locateMinimum(b, 7) == 6);test to see if locateMin returns the correct index of min
    assert(locateMinimum(b, 5) == 1);test to see if locateMin returns the correct index of min
    assert(locateMinimum(b, 3) == 1);test to see if locateMin returns the correct index of min
    assert(locateMinimum(four, 5) == 0);test to see if locateMin returns the correct index of min
    assert(locateMinimum(four, 3) == 0);test to see if locateMin returns the correct index of min
    assert(locateMinimum(four, 1) == 0);test to see if locateMin returns the correct index of min
    assert(locateMinimum(five, 5) == 0);test to see if locateMin returns the correct index of min
    assert(locateMinimum(five, 3) == 0);test to see if locateMin returns the correct index of min
    assert(locateMinimum(fiveRe, 5) == 4);test to see if locateMin returns the correct index of min
    assert(locateMinimum(fiveRe, 4) == 3);test to see if locateMin returns the correct index of min
    assert(locateMinimum(fiveRe, 3) == 2);test to see if locateMin returns the correct index of min
    assert(locateMinimum(fiveRe, 2) == 1);test to see if locateMin returns the correct index of min
    assert(locateMinimum(three, 5) == 0);test to see if locateMin returns the correct index of min
    assert(locateMinimum(allOne, 5) == 0);test to see if locateMin returns the correct index of min
    assert(locateMinimum(allOne, 5) == 0);test to see if locateMin returns the correct index of min

findLastOccurrence:

    assert(findLastOccurrence(b, 7, "BB") == 3);tests to see if findLastOccurrence returns the last index of target 
    assert(findLastOccurrence(fourRe, 5, "3") == 2);tests to see if findLastOccurrence returns the last index of target 
    assert(findLastOccurrence(three, 5, "1") == 4);tests to see if findLastOccurrence returns the last index of target 
    assert(findLastOccurrence(allOne, 5, "1") == 4);tests to see if findLastOccurrence returns the last index of target 
    assert(findLastOccurrence(eightFour, 4, "5") == 0);tests to see if findLastOccurrence returns the last index of target 
    assert(findLastOccurrence(allOne, 5, "1") == 4);tests to see if findLastOccurrence returns the last index of target 
    assert(findLastOccurrence(allOne, 5, "1") == 4);tests to see if findLastOccurrence returns the last index of target 
    assert(findLastOccurrence(blank, 4, "") == 3);tests to see if findLastOccurrence returns the last index of target 
    assert(findLastOccurrence(three, 3, "1") == 2);tests to see if findLastOccurrence returns the last index of target 
    assert(findLastOccurrence(two, 1, "1") == 0);tests to see if findLastOccurrence returns the last index of target 
    assert(findLastOccurrence(nineFive, 5, "1") == -1);tess to see if findLastOccurrence returns -1 when size is invalid or target is not found 
    assert(findLastOccurrence(example, 5, "") == -1);tess to see if findLastOccurrence returns -1 when size is invalid or target is not found 
    assert(findLastOccurrence(folks, 0, "1") == -1);tess to see if findLastOccurrence returns -1 when size is invalid or target is not found 
    assert(findLastOccurrence(allOne, -6, "1") == -1);tess to see if findLastOccurrence returns -1 when size is invalid or target is not found 

hasNoDuplicates:

    assert(hasNoDuplicates(five, 5) == true);tests to see if hasNoDuplicates returns correct boolean value give valid array size
    assert(hasNoDuplicates(o, 5) == false);tests to see if hasNoDuplicates returns correct boolean value give valid array size
    assert(hasNoDuplicates(four, 5) == false);tests to see if hasNoDuplicates returns correct boolean value give valid array size
    assert(hasNoDuplicates(fiveRe, 5) == true);tests to see if hasNoDuplicates returns correct boolean value give valid array size
    assert(hasNoDuplicates(three, 5) == false);tests to see if hasNoDuplicates returns correct boolean value give valid array size
    assert(hasNoDuplicates(threeRe, 5) == false);tests to see if hasNoDuplicates returns correct boolean value give valid array size
    assert(hasNoDuplicates(two, 5) == false);tests to see if hasNoDuplicates returns correct boolean value give valid array size
    assert(hasNoDuplicates(two, -1) == false);tests to see if hasNoDuplicates returns false when size < 0
    assert(hasNoDuplicates(a, 5) == true);tests to see if hasNoDuplicates returns correct boolean value give valid array size
    assert(hasNoDuplicates(a, 0) == true);test to see if hasNoDuplicates returns true when size = 0 

isInIncreasingOrder:

    assert(isInIncreasingOrder(five, 5) == true);tests to see isInIncreasingOrder returns the correct bool value 
    assert(isInIncreasingOrder(o, 5) == false);tests to see isInIncreasingOrder returns the correct bool value 
    assert(isInIncreasingOrder(four, 5) == false);tests to see isInIncreasingOrder returns the correct bool value 
    assert(isInIncreasingOrder(fiveRe, 5) == false);tests to see isInIncreasingOrder returns the correct bool value 
    assert(isInIncreasingOrder(three, 5) == false);tests to see isInIncreasingOrder returns the correct bool value 
    assert(isInIncreasingOrder(threeRe, 2) == true);tests to see isInIncreasingOrder returns the correct bool value 
    assert(isInIncreasingOrder(two, 2) == true);tests to see isInIncreasingOrder returns the correct bool value 
    assert(isInIncreasingOrder(a, 5) == false);tests to see isInIncreasingOrder returns the correct bool value 
    assert(isInIncreasingOrder(five, 0) == true);tests to see isInIncreasingOrder returns true if size = 0
    assert(isInIncreasingOrder(o, -7) == false);tests to see isInIncreasingOrder returns false if sizse < 0
    
shiftRight:

    assert(shiftRight(example, 7, 1, "empty") == 6);tests if shiftRight returns the number of original items in the array, checks if the final array is correct at each index 
    assert(example[0] == "empty");
    assert(example[1] == "5");
    assert(example[2] == "1");
    assert(example[3] == "5");
    assert(example[4] == "2");
    assert(example[5] == "10");
    assert(example[6] == "11");

    assert(shiftRight(eightFour, 3, 1, "empty") == 2);tests if shiftRight returns the number of original items in the array, checks if the final array is correct at each index 
    assert(example[0] == "empty");
    assert(eightFour[0] == "empty");
    assert(eightFour[1] == "5");
    assert(eightFour[2] == "4");
    assert(eightFour[3] == "4");
    assert(eightFour[4] == "8");

    assert(shiftRight(example1, 5, 2, "empty") == 3);tests if shiftRight returns the number of original items in the array, checks if the final array is correct at each index 
    assert(example[0] == "empty");
    assert(example1[0] == "empty");
    assert(example1[1] == "empty");
    assert(example1[2] == "0");
    assert(example1[3] == "1");
    assert(example1[4] == "2");
    assert(example1[5] == "5");
    assert(example1[6] == "6");
    assert(example1[7] == "7");

    assert(shiftRight(nineFour, 5, 2, "empty") == 3);tests if shiftRight returns the number of original items in the array, checks if the final array is correct at each index 
    assert(example[0] == "empty");
    assert(nineFour[0] == "empty");
    assert(nineFour[1] == "empty");
    assert(nineFour[2] == "5");
    assert(nineFour[3] == "4");
    assert(nineFour[4] == "7");

    assert(shiftRight(o, -7, 0, "empty") == -1);tests if shiftRight returns -1 when size n is invalid and amount = 0

    Additionally, a nested for loop is written to test the shiftRight function, the nested for loop loops through different combinations of size n and amount for a particular array. 
    The loop uses logic statements to determine if the function should return 0, -1 or the number of original items. 

flipAround:

    assert(flipAround(bar, 6) == 3);tests if the function flipAround returns the correct number of flips, checks if each element of new array is correctly flipped
    assert(bar[0] == "11");
    assert(bar[1] == "10");
    assert(bar[2] == "2");
    assert(bar[3] == "5");
    assert(bar[4] == "1");
    assert(bar[5] == "5");
    assert(bar[6] == "15");
    
    assert(flipAround(fourRe, 5) == 2);tests if the function flipAround returns the correct number of flips, checks if each element of new array is correctly flipped
    assert(fourRe[0] == "1");
    assert(fourRe[1] == "2");
    assert(fourRe[2] == "3");
    assert(fourRe[3] == "3");
    assert(fourRe[4] == "4");
    
    assert(flipAround(nineFive, 4) == 2);tests if the function flipAround returns the correct number of flips, checks if each element of new array is correctly flipped
    assert(nineFive[0] == "8");
    assert(nineFive[1] == "7");
    assert(nineFive[2] == "6");
    assert(nineFive[3] == "5");
    assert(nineFive[4] == "9");
    
    assert(flipAround(allOne, 0) == -1);tests if the function flipAround returns -1 when array size is invalid, checks if each element of new array is correctly flipped
    assert(allOne[0] == "1");
    assert(allOne[1] == "1");
    assert(allOne[2] == "1");
    assert(allOne[3] == "1");
    assert(allOne[3] == "1");

    Additionally, a for loop is written to systematically test the output of this function. The for loop loops through a different value of n, both valid and invalid and tests 
    if the function outputs the correct number of flips

unionWithNoDuplicates:

    string resultingString[100];
    int resultingSize = 0;
    
    unionWithNoDuplicates(two, 4, five, 5, resultingString, resultingSize);test if the function returns all the duplicates and combines the two arrays by checking each element in the new array 
    assert(resultingSize == 5);
    assert(resultingString[0] == "1"); 
    assert(resultingString[1] == "2");
    assert(resultingString[2] == "3");
    assert(resultingString[3] == "4");
    assert(resultingString[4] == "5");
   
   unionWithNoDuplicates(blank, 4, blank, 4, resultingString, resultingSize);test if the function returns all the duplicates and combines the two arrays by checking each element in the new array 
    assert(resultingSize == 1);
    assert(resultingString[0] == "");
   
   unionWithNoDuplicates(a, 5, people, 5, resultingString, resultingSize);test if the function returns all the duplicates and combines the two arrays by checking each element in the new array 
    assert(resultingSize == 10); 
    assert(resultingString[0] == "ee");
    assert(resultingString[1] == "dd");
    assert(resultingString[2] == "cc");
    assert(resultingString[3] == "bb");
    assert(resultingString[4] == "aa");
    assert(resultingString[5] == "samwell");
    assert(resultingString[6] == "jon");
    assert(resultingString[7] == "margaery");
    assert(resultingString[8] == "daenerys");
    assert(resultingString[9] == "tyrion");
    
    unionWithNoDuplicates(blank, 4, allOne, 5, resultingString, resultingSize);test if the function returns all the duplicates and combines the two arrays by checking each element in the new array 
    assert(resultingSize == 2);
    assert(resultingString[0] == "");
    assert(resultingString[1] == "1");   

Additionally, a nested for loop is written to systematically test this function. The for loop loops through different value of n1 and n2 and checks if the resultingSize is changed to the correct value
A helper function dupNum is created to make this for loop function as intended. 